import logging
import subprocess

from aiogram import Bot, types, Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram_calendar import simple_cal_callback, SimpleCalendar
from aiogram_calendar import simple_cal_callback2, SimpleCalendar2
from aiogram.dispatcher.filters import Text
import speech_recognition as sr
from gtts import gTTS
from active_user import Database
from datetime import date
from config import TOKEN
from lemmatize_text import UkrainianStemmer
import keyboards as nav
import registering
import asyncio
import json

logging.basicConfig(level=logging.INFO)


async def on_startup(_):
    registering.sql_start()


bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot=bot, storage=MemoryStorage())

db = Database("subscriber.db")


class GetCase(StatesGroup):
    case = State()


class GetWord(StatesGroup):
    surname = State()


class GetCalendar(StatesGroup):
    den = State()
    forma = State()
    judge = State()


class RegUser(StatesGroup):
    user_id = State()
    name = State()


class GetWordZka(StatesGroup):
    surname_zka = State()


class GetCaseZka(StatesGroup):
    case_zka = State()


class RegUserZka(StatesGroup):
    user_id_zka = State()
    name_zka = State()


class GetWordUg(StatesGroup):
    surname_ug = State()


class GetCaseUg(StatesGroup):
    case_ug = State()


class RegUserUg(StatesGroup):
    user_id_ug = State()
    name_ug = State()


class GetCalendarUg(StatesGroup):
    den = State()
    forma = State()
    judge = State()


class GetVoice(StatesGroup):
    voiceT = State()


@dp.message_handler(commands=["start", "help"])
async def start(message: types.Message):
    if message.chat.type == "private":
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id, message.from_user.first_name)
        await message.answer("üëã–î–æ–±—Ä–æ–≥–æ –¥–Ω—è {0.first_name}!".format(message.from_user))
        with open("foto/PRC.jpg", "rb") as jpg:
            await message.answer_photo(
                jpg,
                "–Ø –í—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç <b>–ü–µ—Ä–µ—á–∏–Ω—Å—å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–Ω–æ–≥–æ —Å—É–¥—É</b>."
                "\n\n–Ø –≤–º—ñ—é –Ω–∞—Ö–æ–¥–∏—Ç–∏ –¥–∞—Ç—É —Å—É–¥–æ–≤–æ–≥–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º,"
                " —ñ–º'—è–º —ñ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏, –∞ —Ç–∞–∫–æ–∂ —Å–ø–æ–≤—ñ—â–∞—é –ø—Ä–æ –¥–∞—Ç—É "
                "—ñ —á–∞—Å –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.\n–Ø–∫—â–æ –Ω–∞–±—Ä–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /–≥–æ–ª–æ—Å –∞–±–æ \n/voice"
                ", —è –æ–∑–≤—É—á—É —Ç–µ–∫—Å—Ç —Ç–∞ –Ω–∞–¥—ñ—à–ª—é –≤–∞–º –π–æ–≥–æ.",
            )
            await asyncio.sleep(1)
            await message.answer(
                "–ù–∞—à–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –±—É–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ —Ç–∞–∫:\n- –í–∏–±–∏—Ä–∞—î—Ç–µüïπ —Ä–æ–∑–¥—ñ–ª –≤ –º–µ–Ω—é"
                "\n- –ù–∞—Ç–∏—Å–∫–∞—î—Ç–µüì≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é\n- –ê —è –í–∞–º –≤—ñ–¥–ø–∏—à—Éüì®.",
            )
            with open("data/prc.mp3", "rb") as file:
                await message.answer_voice(file, reply_markup=nav.mainMenu)


@dp.message_handler(commands=["check"])
async def check(message: types.Message):
    await registering.aql_read(message)


@dp.message_handler(commands=["checkpr"])
async def checkpr(message: types.Message):
    await registering.aql_read_pr(message)


@dp.message_handler(commands=["checkzka"])
async def checkzka(message: types.Message):
    await registering.aql_read_zka(message)


@dp.message_handler(commands=["voice", "–≥–æ–ª–æ—Å"])
async def voice(message: types.Message):
    await message.answer(
        "{0.first_name} –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞"
        " —è –æ–∑–≤—É—á—É —ñ –Ω–∞–¥—ñ—à–ª—é –í–∞–º –π–æ–≥–æ."
        "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞üëâ /cancel".format(message.from_user),
        reply_markup=nav.markupregistr,
    )
    await GetVoice.voiceT.set()


@dp.message_handler(commands=["uzhhorod", "—É–∂–≥–æ—Ä–æ–¥"])
async def uzhhorod(message: types.Message):
    await message.answer(
        "{0.first_name} –≤ –¥–∞–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ, –Ω–∞–∂–∞–≤—à–∏üïπ –Ω–∞ –Ω–∏–∂–µ –≤–∫–∞–∑–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏üëá,"
        " –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –¥–∞—Ç—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –£–∂–≥–æ—Ä–æ–¥—Å—å–∫–æ–≥–æ –º—ñ—Å—å–∫—Ä–∞–π–æ–Ω–Ω–æ–≥–æ —Å—É–¥—É"
        " —Ç–∞ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω—èüì© —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–∞—Ç—É, —á–∞—Å "
        "—Å—É–¥–æ–≤–æ–≥–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è:"
        "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üé´–ü–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Ç–∞ —ñ–º‚Äô—è–º - –Ω–∞–±–∏—Ä–∞—î–º–æ –ü.–Ü. —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•"
        "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üîñ–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏‚å® - –Ω–∞–±–∏—Ä–∞—î–º–æ 304/555/20 —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•"
        "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üì©Push —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - —Å–µ—Ä–≤—ñ—Å –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
        " –¥–∞—Ç–∏ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.\n\n–©–æ–± –æ–∑–≤—É—á–∏—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /–≥–æ–ª–æ—Å –∞–±–æ /voice.".format(
            message.from_user
        ),
        reply_markup=nav.markupsearch_ug,
    )


@dp.message_handler(content_types=["voice"])
async def voice_message_handler(message):
    with open("data/data_pr.json", "r", encoding="utf-8") as f:
        file_content = f.read()
        data1 = json.loads(file_content)

        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, "data/voice.ogg")

        process = subprocess.run(
            ["ffmpeg\\ffmpeg.exe", "-i", "data/voice.ogg", "data/voice.wav"],
            input=b"y",
            stderr=subprocess.DEVNULL,
        )
        if process.returncode != 0:
            raise Exception("Something went wrong")

        response = {"success": True, "error": None, "transcription": None}
        try:
            r = sr.Recognizer()

            user_audio_file = sr.AudioFile("data/voice.wav")
            with user_audio_file as source:
                user_audio = r.record(source)
                text = r.recognize_google(user_audio, language="uk-UK")
        except sr.RequestError:
            response["success"] = False
            response["error"] = "API unavailable"
        except sr.UnknownValueError:
            response["error"] = "Unable to recognize speech"

        stemObj = UkrainianStemmer(text.replace("'", " "))

        flag = True
        for i in data1:
            if stemObj.stem_word() in i["involved"].lower().replace('"', " ").replace(
                "'", " "
            ):
                news2 = (
                    f"–í–∞—à –∑–∞–ø–∏—Ç: {text}\n\n"
                    f"–ü–µ—Ä–µ—á–∏ÃÅ–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω–Ω–∏–π —Å—É–¥\n\n"
                    f"–°—É–¥–¥—è:{i['judge']}\n\n"
                    f"–ù–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏:{i['number']}\n\n"
                    f"–î–∞—Ç–∞/–ß–∞—Å:<b>{i['date']}</b>\n\n"
                    f"–°—Ç–æ—Ä–æ–Ω–∏ –ø–æ —Å–ø—Ä–∞–≤—ñ:\n<b>{i['involved']}</b>\n\n"
                    f"–°—É—Ç—å –ø–æ–∑–æ–≤—É:\n<b>{i['description']}</b>\n\n"
                    f"–§–æ—Ä–º–∞ —Å—É–¥–æ—á–∏–Ω—Å—Ç–≤–∞:\n{i['forma']}"
                )
                await message.answer(news2, reply_markup=nav.mainMenu)
                flag = False

        if flag:
            await message.answer(
                f"–í–∞—à –∑–∞–ø–∏—Ç: {text}\n–Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑'—è–≤–∏–ª–æ—Å—è, –º–æ–∂–ª–∏–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–µ —Å–ª–æ–≤–æ –∞–±–æ —Å–ø—Ä–∞–≤–∞ "
                f"—â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É.\n–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ –ù–∞—à –≤–µ–±–ø–æ—Ä—Ç–∞–ª.",
                reply_markup=nav.mainMenu,
            )


# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == "üîô–ù–∞–∑–∞—Ç –≤ –º–µ–Ω—é":
        await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=nav.mainMenu)  # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é

    elif message.text == "‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω–Ω—ñ":  # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await message.answer(
            "<u><b>{0.first_name} –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ:</b></u> \n\n\nüìç E-mailüìß: "
            "inbox@pr.zk.court.gov.ua\n\n\nüìç –¢–µ–ª–µ—Ñ–æ–Ωüìû: (03145)2-11-96\n\n\nüìç "
            "–ê–¥—Ä–µ—Å–∞üìÆ: –ø–ª. –ù–∞—Ä–æ–¥–Ω–∞, 15, –º. –ü–µ—Ä–µ—á–∏–Ω, 89200.\n\n\nüìç –ö–∞—Ä—Ç–∏üó∫ –ø—Ä–æ—ó–∑–¥—É üöñ üëá.".format(
                message.from_user
            ),
            reply_markup=nav.markupkartu,
        )

    elif message.text == "üó∫–ö–∞—Ä—Ç–∏ –ø—Ä–æ—ó–∑–¥—É":
        await message.answer("–ö–∞—Ä—Ç–∏ –ø—Ä–æ—ó–∑–¥—É üöó.")
        with open("foto/perechin.jpg", "rb") as file:
            await message.answer_photo(file, reply_markup=nav.markupgeoa)
        with open("foto/perechin1.jpg", "rb") as file:
            await message.answer_photo(file, reply_markup=nav.markupgeo)

    elif message.text == "üì¢–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–ª–∏–∫":  # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await message.answer(
            "{0.first_name} –ø–µ—Ä–µ–π—à–æ–≤—à–∏ –Ω–∞ –≤–µ–±–ø–æ—Ä—Ç–∞–ª, –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∏–≤–∏—Ç–∏—Å—è –≤—Å—ñ "
            "–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–ª–∏–∫ –¥–æ —Å—É–¥—É.".format(message.from_user),
            reply_markup=nav.markupnews,
        )

    elif message.text == "–í—ñ–¥–µ–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è":
        await message.answer(
            "{0.first_name} –≤—ñ–¥–µ–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è, —è–∫ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —á–∞—Ç—ñ."
            " –ü—ñ–¥ –∫–æ–∂–Ω–æ—é –∫–Ω–æ–ø–∫–æ—é —î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ. –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ "
            "–∑–∞—è–≤–∏—Ç—å—Å—è –≤—ñ–¥–µ–æ –Ω–∞ –¥–∞–Ω—É —Ç–µ–º–∞—Ç–∏–∫—É. –ù–∞–∂–∞–≤—à–∏ –Ω–∞ *üîô–ù–∞–∑–∞—Ç* "
            "–≤—Å–µ –∑–Ω–∏–∫–Ω–µ.".format(message.from_user),
            reply_markup=nav.inline_button,
        )

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    elif message.text == "üìÉ–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –°—É–¥":
        with open("foto/electroniccourt.jpg", "rb") as file:
            await message.answer_photo(
                file,
                "{0.first_name} –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π —Å—É–¥ –¥–æ–∑–≤–æ–ª—è—î –ø–æ–¥–∞–≤–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞–º —Å—É–¥–æ–≤–æ–≥–æ"
                " –ø—Ä–æ—Ü–µ—Å—É –¥–æ —Å—É–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ, –∞ —Ç–∞–∫–æ–∂ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏"
                " —Ç–∞–∫–∏–º —É—á–∞—Å–Ω–∏–∫–∞–º –ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –≤ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ, "
                "–ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —É –ø–∞–ø–µ—Ä–æ–≤–æ–º—É –≤–∏–≥–ª—è–¥—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ "
                '–ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞.\n\n<a href="https://id.court.gov.ua/">'
                "–ü–µ—Ä–µ–π—Ç–∏ –≤ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –°—É–¥üîó.</a>\n\n.".format(message.from_user),
                reply_markup=nav.markupmobileapp,
            )

    elif message.text == "üì≤–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –º–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ —î–°—É–¥":
        await message.answer(
            "–¢–∞–∫–æ–∂ –í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –ù–∞—à–∏–º –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º –º–æ–±—ñ–ª—å–Ω–∏–º –¥–æ–¥–∞—Ç–∫–æ–º <b>–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Å—É–¥—É –≤ "
            "–£–∫—Ä–∞—ó–Ω—ñ —î–°—É–¥</b> –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–º –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Å—É–¥—É –∑ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤. "
            "<b>–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É –í–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –±—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–º –≤ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É "
            '–∫–∞–±—ñ–Ω–µ—Ç—ñ</b>.\n\n<a href="https://cabinet.court.gov.ua">–ü–µ—Ä–µ–π—Ç–∏ –≤ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π'
            " –∫–∞–±—ñ–Ω–µ—Çüîó.</a>\n\n.",
            reply_markup=nav.markup16,
        )

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    elif message.text == "üìù–ó–∞—è–≤–∏":
        await message.answer(
            "{0.first_name} –≥—Ä–∞—Ñ—ñ–∫üìã –ø—Ä–∏–π–º–∞–Ω–Ω—è –≥—Ä–æ–º–∞–¥—è–Ω —Ç–∞ –≤–∏–¥–∞—á—ñ –∫–æ–ø—ñ–π —Å—É–¥–æ–≤–∏—Ö —Ä—ñ—à–µ–Ω—å.\n\n"
            "    <u>–ó –ü–ù. –ø–æ –ü–¢.</u>\n–∑ 08:00üïó –¥–æ 17:00üïî\n\n  <u>–û–±—ñ–¥–Ω—è –ø–µ—Ä–µ—Ä–≤–∞</u>\n–∑ "
            "12:00üïõ –¥–æ 13:00üïê\n\n–í–∏–±–µ—Ä—ñ—Ç—å <b>–∑—Ä–∞–∑–æ–∫ –∑–∞—è–≤–∏</b> –∑—ñ —Å–ø–∏—Å–∫—Éüëá.".format(
                message.from_user
            ),
            reply_markup=nav.markuplist1,
        )

    elif message.text == "üìë–°–ø–∏—Å–æ–∫ –∑–∞—è–≤":
        await message.answer("<b>–°–ø–∏—Å–æ–∫ –∑–∞—è–≤</b>üìë", reply_markup=nav.markupexample)

    elif message.text == "üìÖ–î–∞—Ç–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è":
        if message.chat.type == "private":
            if not db.user_exists(message.from_user.id):
                db.add_user(message.from_user.id, message.from_user.first_name)
            await message.answer(
                "{0.first_name} –≤ –¥–∞–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –¥–∞—Ç—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –Ω–∞–∂–∞–≤—à–∏üïπ "
                "–Ω–∞ –Ω–∏–∂–µ –≤–∫–∞–∑–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏üëá:"
                "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üé´–ü–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Ç–∞ —ñ–º‚Äô—è–º - –Ω–∞–±–∏—Ä–∞—î–º–æ –ü.–Ü —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•"
                "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üîñ–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏ - –Ω–∞–±–∏—Ä–∞—î–º–æ 304/555/20 —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•"
                "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üóìÔ∏è–ü–æ—à—É–∫ –∑–∞ –¥–∞—Ç–æ—é - –≤–∏–±–∏—Ä–∞—î–º–æ –¥–∞—Ç—É —ñ –ø—Ä—ñ–∑–≤–∏—â–µ —Å—É–¥–¥—ñ"
                "\n\n–©–æ–± –æ–∑–≤—É—á–∏—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /–≥–æ–ª–æ—Å –∞–±–æ /voice.".format(
                    message.from_user
                ),
                reply_markup=nav.markupsearch,
            )

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    elif message.text == "üîñ–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏":
        await message.answer(
            "{0.first_name} –Ω–∞–±–∏—Ä–∞—î–º–æ‚å® –∑–≥—ñ–¥–Ω–æ –∑—Ä–∞–∑–∫—ñ–≤ "
            "304/555/20 –∞–±–æ 555/20 —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•."
            "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \n–Ω–∞üëâ /stop.".format(message.from_user),
            reply_markup=nav.markupstop,
        )
        await GetCase.case.set()

    elif message.text == "üóìÔ∏è–ü–æ—à—É–∫ –∑–∞ –¥–∞—Ç–æ—é":
        await message.answer(
            "{0.first_name} —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –≤–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —Å–ª—ñ–¥—É–π—Ç–µüëâ –ø–æ–¥–∞–ª—å—à–∏–º —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º."
            " –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞üëâ /stop.".format(message.from_user),
            reply_markup=await SimpleCalendar().start_calendar(),
        )

        await GetCalendar.den.set()

    elif message.text == "üé´–ü–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Ç–∞ —ñ–º‚Äô—è–º":
        await message.answer(
            "{0.first_name} –Ω–∞–±–∏—Ä–∞—Ç–∏ –º–æ–∂–Ω–∞ –∑ –º–∞–ª–æ—ó –±—É–∫–≤–∏, –∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ –≤ —Ç–µ–∫—Å—Ç—ñ "
            "–∑–∞–º—ñ–Ω—è—î–º–æ –Ω–∞ –ø—Ä–æ–±—ñ–ª."
            "\n\n<b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è</b>‚ùó, —è–∫—â–æ –±—É–¥–µ –≤–≤–µ–¥–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ –ø—Ä—ñ–∑–≤–∏—â–µ –∞–±–æ —ñ–º‚Äô—è, "
            "—Ç–æ –í–∞–º –≤–∏–¥–∞—Å—Ç—å –≤—Å—ñ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –Ω–∞ –¥–∞–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ –∞–±–æ —ñ–º‚Äô—è."
            "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \n–Ω–∞üëâ /stop.".format(message.from_user),
            reply_markup=nav.markupstop,
        )
        await GetWord.surname.set()

    elif message.text == "üì©Push —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è":
        await message.answer(
            "{0.first_name} –≤ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –º–æ–∂–Ω–∞ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Å–µ—Ä–≤—ñ—Å–æ–º *<b>Push"
            " —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è</b>*.\n–°—É—Ç—å —Å–µ—Ä–≤—ñ—Å—É –ø—Ä–æ—Å—Ç–∞, –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µüì© —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–∞—Ç—É, —á–∞—Å "
            "—Å—É–¥–æ–≤–æ–≥–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.\n\n–©–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è‚úçüèª –Ω–∞ —Å–µ—Ä–≤—ñ—Å –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–±—Ä–∞—Ç–∏‚å® "
            "*<b>—Ç–∞–∫</b>* —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏üì• —Ç–∞ —Å–ª—ñ–¥—É–≤–∞—Ç–∏üëâ –ø–æ–¥–∞–ª—å—à–∏–º —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º."
            "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å\n–Ω–∞üëâ /cancel.".format(
                message.from_user
            ),
            reply_markup=nav.markupregistr,
        )
        await RegUser.user_id.set()

    elif message.text == "‚öñÔ∏è–ê–ø–µ–ª—è—Ü—ñ–π–Ω–∏–π —Å—É–¥":  # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        if message.chat.type == "private":
            if not db.user_exists(message.from_user.id):
                db.add_user(message.from_user.id, message.from_user.first_name)
            await message.answer(
                "{0.first_name} –≤ –¥–∞–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ, –Ω–∞–∂–∞–≤—à–∏üïπ –Ω–∞ –Ω–∏–∂–µ –≤–∫–∞–∑–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏üëá,"
                " –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –¥–∞—Ç—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–æ–≥–æ –∞–ø–µ–ª—è—Ü—ñ–π–Ω–æ–≥–æ —Å—É–¥—É"
                " —Ç–∞ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω—èüì© —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–∞—Ç—É, —á–∞—Å "
                "—Å—É–¥–æ–≤–æ–≥–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è:"
                "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üé´–ü–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Ç–∞ —ñ–º‚Äô—è–º - –Ω–∞–±–∏—Ä–∞—î–º–æ –ü.–Ü. —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•"
                "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üîñ–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏‚å® - –Ω–∞–±–∏—Ä–∞—î–º–æ 304/555/20 —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•"
                "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üì©Push —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - —Å–µ—Ä–≤—ñ—Å –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
                " –¥–∞—Ç–∏ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.\n\n–©–æ–± –æ–∑–≤—É—á–∏—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /–≥–æ–ª–æ—Å –∞–±–æ /voice.".format(
                    message.from_user
                ),
                reply_markup=nav.markupsearch_zka,
            )

    elif message.text == "üé´–ü–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Ç–∞ —ñ–º‚Äô—è–º zka":
        await message.answer(
            "{0.first_name} –Ω–∞–±–∏—Ä–∞—Ç–∏ –º–æ–∂–Ω–∞ –∑ –º–∞–ª–æ—ó –±—É–∫–≤–∏, –∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ –≤ —Ç–µ–∫—Å—Ç—ñ "
            "–∑–∞–º—ñ–Ω—è—î–º–æ –Ω–∞ –ø—Ä–æ–±—ñ–ª.\n\n<b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è</b>‚ùó, —è–∫—â–æ –±—É–¥–µ –≤–≤–µ–¥–µ–Ω–æ "
            "—Ç—ñ–ª—å–∫–∏ –ø—Ä—ñ–∑–≤–∏—â–µ –∞–±–æ —ñ–º‚Äô—è, —Ç–æ –í–∞–º –≤–∏–¥–∞—Å—Ç—å –≤—Å—ñ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –Ω–∞ "
            "–¥–∞–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ –∞–±–æ —ñ–º‚Äô—è."
            "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \n–Ω–∞üëâ /pass.".format(message.from_user),
            reply_markup=nav.markuppass,
        )
        await GetWordZka.surname_zka.set()

    elif message.text == "üîñ–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏ zka":
        await message.answer(
            "{0.first_name} –Ω–∞–±–∏—Ä–∞—î–º–æ‚å® –∑–≥—ñ–¥–Ω–æ –∑—Ä–∞–∑–∫—ñ–≤ "
            "304/555/20 –∞–±–æ 555/20 —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•."
            "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \n–Ω–∞üëâ /pass.".format(message.from_user),
            reply_markup=nav.markuppass,
        )
        await GetCaseZka.case_zka.set()

    elif message.text == "üì©Push —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è zka":
        await message.answer(
            "{0.first_name} –≤ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –º–æ–∂–Ω–∞ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Å–µ—Ä–≤—ñ—Å–æ–º *<b>Push"
            " —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è</b>*.\n–°—É—Ç—å —Å–µ—Ä–≤—ñ—Å—É –ø—Ä–æ—Å—Ç–∞, –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µüì© —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–∞—Ç—É, —á–∞—Å "
            "—Å—É–¥–æ–≤–æ–≥–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.\n\n–©–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è‚úçüèª –Ω–∞ —Å–µ—Ä–≤—ñ—Å –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–±—Ä–∞—Ç–∏‚å® "
            "*<b>—Ç–∞–∫</b>* —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏üì• —Ç–∞ —Å–ª—ñ–¥—É–≤–∞—Ç–∏üëâ –ø–æ–¥–∞–ª—å—à–∏–º —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º."
            "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \n–Ω–∞üëâ /refuse.".format(
                message.from_user
            ),
            reply_markup=nav.markupregistr_zka,
        )
        await RegUserZka.user_id_zka.set()

    elif message.text == "üé´–ü–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Ç–∞ —ñ–º‚Äô—è–º ug":
        await message.answer(
            "{0.first_name} –Ω–∞–±–∏—Ä–∞—Ç–∏ –º–æ–∂–Ω–∞ –∑ –º–∞–ª–æ—ó –±—É–∫–≤–∏, –∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ –≤ —Ç–µ–∫—Å—Ç—ñ "
            "–∑–∞–º—ñ–Ω—è—î–º–æ –Ω–∞ –ø—Ä–æ–±—ñ–ª.\n\n<b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è</b>‚ùó, —è–∫—â–æ –±—É–¥–µ –≤–≤–µ–¥–µ–Ω–æ "
            "—Ç—ñ–ª—å–∫–∏ –ø—Ä—ñ–∑–≤–∏—â–µ –∞–±–æ —ñ–º‚Äô—è, —Ç–æ –í–∞–º –≤–∏–¥–∞—Å—Ç—å –≤—Å—ñ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –Ω–∞ "
            "–¥–∞–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ –∞–±–æ —ñ–º‚Äô—è."
            "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \n–Ω–∞üëâ /no.".format(message.from_user),
            reply_markup=nav.markuppasug,
        )
        await GetWordUg.surname_ug.set()

    elif message.text == "üîñ–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏ ug":
        await message.answer(
            "{0.first_name} –Ω–∞–±–∏—Ä–∞—î–º–æ‚å® –∑–≥—ñ–¥–Ω–æ –∑—Ä–∞–∑–∫—ñ–≤ "
            "304/555/20 –∞–±–æ 555/20 —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•."
            "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \n–Ω–∞üëâ /no.".format(message.from_user),
            reply_markup=nav.markuppasug,
        )
        await GetCaseUg.case_ug.set()

    elif message.text == "üì©Push —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ug":
        await message.answer(
            "{0.first_name} –≤ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –º–æ–∂–Ω–∞ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Å–µ—Ä–≤—ñ—Å–æ–º *<b>Push"
            " —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è</b>*.\n–°—É—Ç—å —Å–µ—Ä–≤—ñ—Å—É –ø—Ä–æ—Å—Ç–∞, –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µüì© —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–∞—Ç—É, —á–∞—Å "
            "—Å—É–¥–æ–≤–æ–≥–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.\n\n–©–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è‚úçüèª –Ω–∞ —Å–µ—Ä–≤—ñ—Å –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–±—Ä–∞—Ç–∏‚å® "
            "*<b>—Ç–∞–∫</b>* —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏üì• —Ç–∞ —Å–ª—ñ–¥—É–≤–∞—Ç–∏üëâ –ø–æ–¥–∞–ª—å—à–∏–º —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º."
            "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \n–Ω–∞üëâ /refuseg.".format(
                message.from_user
            ),
            reply_markup=nav.markupregistr_ug,
        )
        await RegUserUg.user_id_ug.set()

    elif message.text == "üóìÔ∏è–ü–æ—à—É–∫ –∑–∞ –¥–∞—Ç–æ—é ug":
        await message.answer(
            "{0.first_name} —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –≤–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —Å–ª—ñ–¥—É–π—Ç–µüëâ –ø–æ–¥–∞–ª—å—à–∏–º —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º."
            " –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞üëâ /no.".format(message.from_user),
            reply_markup=await SimpleCalendar2().start_calendar(),
        )

        await GetCalendarUg.den.set()


@dp.message_handler(state="*", commands=["stop", "—Å—Ç–æ–ø"])
@dp.message_handler(Text(equals="stop", ignore_case=True), state="*")
async def stop_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer("OK!üëå", reply_markup=nav.markupsearch)


@dp.message_handler(state="*", commands=["pass", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"])
@dp.message_handler(Text(equals="pass", ignore_case=True), state="*")
async def pass_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer("OK!üëå", reply_markup=nav.markupsearch_zka)


@dp.message_handler(state="*", commands=["no", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏."])
@dp.message_handler(Text(equals="no", ignore_case=True), state="*")
async def pass_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer("OK!üëå", reply_markup=nav.markupsearch_ug)


# –ø–æ—à—É–∫ –¥–∞—Ç–∏ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è
@dp.message_handler(state=GetCase.case, content_types=types.ContentTypes.TEXT)
async def case_handler(message: types.Message, state: FSMContext):
    with open("data/data_pr.json", "r", encoding="utf-8") as f:
        file_content = f.read()
        data1 = json.loads(file_content)

    flag = True
    for i in data1:
        if message.text in i["number"]:
            news1 = (
                f"–°—É–¥–¥—è: {i['judge']}\n"
                f"–ù–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏: {i['number']}\n"
                f"–î–∞—Ç–∞/–ß–∞—Å: <b>{i['date']}</b> –≥–æ–¥.\n"
                f"–°—Ç–æ—Ä–æ–Ω–∏ –ø–æ —Å–ø—Ä–∞–≤—ñ:\n<b>{i['involved']}</b>\n"
                f"–°—É—Ç—å –ø–æ–∑–æ–≤—É:\n<b>{i['description']}</b>"
            )
            await state.finish()
            await message.answer(
                news1,
                reply_markup=nav.markupsearch,
            )

            flag = False

    if flag:
        await state.finish()
        await message.answer(
            "–Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑'—è–≤–∏–ª–æ—Å—è, –º–æ–∂–ª–∏–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏ –∞–±–æ —Å–ø—Ä–∞–≤–∞ "
            "—â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É.\n–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ –ù–∞—à –≤–µ–±–ø–æ—Ä—Ç–∞–ª.",
            reply_markup=nav.markuphome,
        )


# –ø–æ—à—É–∫ –¥–∞—Ç–∏ –∑–∞—Å—ã–¥–∞–Ω–Ω—è –∑–∞ —Å–ª–æ–≤–æ–º
@dp.message_handler(state=GetWord.surname, content_types=types.ContentTypes.TEXT)
async def word_handler(message: types.Message, state: FSMContext):
    with open("data/data_pr.json", "r", encoding="utf-8") as f:
        file_content = f.read()
        data1 = json.loads(file_content)

        stemObj = UkrainianStemmer(message.text.replace("'", " "))

    flag = True
    for i in data1:
        if stemObj.stem_word() in i["involved"].lower().replace('"', " ").replace(
            "'", " "
        ):
            news2 = (
                f"–°—É–¥–¥—è: {i['judge']}\n"
                f"–ù–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏: {i['number']}\n"
                f"–î–∞—Ç–∞/–ß–∞—Å: <b>{i['date']}</b> –≥–æ–¥.\n"
                f"–°—Ç–æ—Ä–æ–Ω–∏ –ø–æ —Å–ø—Ä–∞–≤—ñ:\n<b>{i['involved']}</b>\n"
                f"–°—É—Ç—å –ø–æ–∑–æ–≤—É:\n<b>{i['description']}</b>"
            )
            await state.finish()
            await message.answer(
                news2,
                reply_markup=nav.markupsearch,
            )
            flag = False

    if flag:
        await state.finish()
        await message.answer(
            "–Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑'—è–≤–∏–ª–æ—Å—è, –º–æ–∂–ª–∏–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–µ —Å–ª–æ–≤–æ –∞–±–æ —Å–ø—Ä–∞–≤–∞ "
            "—â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É.\n–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ –ù–∞—à –≤–µ–±–ø–æ—Ä—Ç–∞–ª.",
            reply_markup=nav.markuphome,
        )


# –ø–æ—à—É–∫ –¥–∞—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é –∫–∞–ª–µ–Ω—Ä–¥–∞—Ä—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Å—É–¥–¥—ñ
@dp.callback_query_handler(simple_cal_callback.filter(), state=GetCalendar.den)
async def process_calendar(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        den = date.strftime("%d.%m.%Y")
        await state.update_data({"den": den})

        await callback_query.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω–µ –∑ —Ñ–æ—Ä–º —Å—É–¥–æ—á–∏–Ω—Å—Ç–≤–∞. –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞üëâ /stop.",
            reply_markup=nav.inline_butforma,
        )
        await GetCalendar.forma.set()

@dp.callback_query_handler(text=["today"], state=GetCalendar.den)
async def calendar_handler(callback_query: types.CallbackQuery, state: FSMContext):
   if callback_query.data == "today":
       await callback_query.message.delete_reply_markup()

       today = date.today()
       den = today.strftime("%d.%m.%Y")
       await state.update_data({"den": den})

   await callback_query.message.answer(
           "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω–µ –∑ —Ñ–æ—Ä–º —Å—É–¥–æ—á–∏–Ω—Å—Ç–≤–∞. –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞üëâ /stop.",
           reply_markup=nav.inline_butforma,
       )
   await GetCalendar.forma.set()


@dp.callback_query_handler(text=["–∞–¥–º—ñ–Ω", "—Ü–∏–≤—ñ–ª", "–∫—Ä–∏–º", "–≤—Å—ñ"], state=GetCalendar.forma)
async def calendar_handler(callback_query: types.CallbackQuery, state: FSMContext):
    global b
    await callback_query.answer()
    if callback_query.data == "–∞–¥–º—ñ–Ω":
        b = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è"
    elif callback_query.data == "—Ü–∏–≤—ñ–ª":
        b = "–¶–∏–≤—ñ–ª—å–Ω–µ —Å—É–¥–æ—á–∏–Ω—Å—Ç–≤–æ"
    elif callback_query.data == "–∫—Ä–∏–º":
        b = "–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ —Å—É–¥–æ—á–∏–Ω—Å—Ç–≤–æ"
    elif callback_query.data == "–≤—Å—ñ":
        b = ""

    forma = b
    await state.update_data({"forma": forma})
    await callback_query.message.delete_reply_markup()
    await callback_query.message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω–µ –∑ –ø—Ä—ñ–∑–≤–∏—â. –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞üëâ /stop.",
        reply_markup=nav.inline_butj,
    )
    await GetCalendar.judge.set()


@dp.callback_query_handler(
    text=["–≥–µ–≤—Ü—ñ", "—á–µ–ø—É—Ä–Ω–æ–≤", "–≥–∞–Ω—å–∫–æ", "all"], state=GetCalendar.judge
)
async def calendar_handler(callback_query: types.CallbackQuery, state: FSMContext):
    with open("data/data_pr.json", "r", encoding="utf-8") as f:
        file_content = f.read()
        data1 = json.loads(file_content)

        data = await state.get_data()
        den = data.get("den")
        forma = data.get("forma")

        await callback_query.answer()
        if callback_query.data == "–≥–µ–≤—Ü—ñ":
            a = "–ì–µ–≤—Ü—ñ –í.–ú."
        elif callback_query.data == "—á–µ–ø—É—Ä–Ω–æ–≤":
            a = "–ß–µ–ø—É—Ä–Ω–æ–≤ –í.–û."
        elif callback_query.data == "–≥–∞–Ω—å–∫–æ":
            a = "–ì–∞–Ω—å–∫–æ –Ü.–Ü."
        elif callback_query.data == "all":
            a = ""
        await callback_query.message.delete_reply_markup()

        flag = True

        for i in data1:
            if den in i["date"] and a in i["judge"] and forma in i["forma"]:
                news3 = (
                    f"–°—É–¥–¥—è: {i['judge']}\n"
                    f"–ù–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏: {i['number']}\n"
                    f"–î–∞—Ç–∞/–ß–∞—Å: <b>{i['date']}</b> –≥–æ–¥.\n"
                    f"–°—Ç–æ—Ä–æ–Ω–∏ –ø–æ —Å–ø—Ä–∞–≤—ñ:\n<b>{i['involved']}</b>\n"
                    f"–°—É—Ç—å –ø–æ–∑–æ–≤—É:\n<b>{i['description']}</b>\n"
                    f"{i['forma']}"
                )

                await state.finish()
                await callback_query.message.answer(
                    news3,
                    reply_markup=nav.markupsearch,
                )
                flag = False

        if flag:
            await state.finish()
            await callback_query.message.answer(
                "–Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑'—è–≤–∏–ª–∞—Å—è, –º–æ–∂–ª–∏–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ —Å–ø—Ä–∞–≤–∞ "
                "—â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É.\n–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ –ù–∞—à –≤–µ–±–ø–æ—Ä—Ç–∞–ª.",
                reply_markup=nav.markuphome,
            )


@dp.message_handler(state="*", commands=["cancel", "–≤—ñ–¥–º–æ–≤–∞"])
@dp.message_handler(Text(equals="cancel", ignore_case=True), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer("OKüëå", reply_markup=nav.mainMenu)


# —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ message push
@dp.message_handler(state=RegUser.user_id, content_types=types.ContentTypes.TEXT)
async def regUser_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["user_id"] = message.from_user.id

    await message.answer(
        "{0.first_name} –Ω–∞–±–µ—Ä—ñ—Ç—å‚å® –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –∞–±–æ –Ω–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µüì•."
        "\n\n<b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è</b>‚ùó \n–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –Ω–∞–±–∏—Ä–∞—Ç–∏ –º–æ–∂–Ω–∞ –∑ –º–∞–ª–æ—ó –±—É–∫–≤–∏, –∞"
        " –∞–ø–æ—Å—Ç—Ä–æ—Ñ –≤ —Ç–µ–∫—Å—Ç—ñ "
        "–∑–∞–º—ñ–Ω—è—î—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±—ñ–ª.\n\n–©–æ–¥–æ –Ω–æ–º–µ—Ä–∞ —Å–ø—Ä–∞–≤–∏ –Ω–∞–±–∏—Ä–∞—î–º–æ‚å® –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑—Ä–∞–∑–∫—ñ–≤ "
        "304/555/20 –∞–±–æ 555/20.\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤–∫–∞–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æüíØ."
        "\n\n–ü—ñ—Å–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è <b>–ø—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–ª–∏—Ç—å—Å—è</b>üóë."
        "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \n–Ω–∞üëâ /cancel.".format(message.from_user),
        reply_markup=nav.markupregistr,
    )
    await RegUser.name.set()


@dp.message_handler(state=RegUser.name, content_types=types.ContentTypes.TEXT)
async def regUser2_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        stemObj = UkrainianStemmer(message.text)

        data["name"] = stemObj.stem_word()

    await registering.sql_add_command(state)

    await state.finish()
    await message.answer(
        "{0.first_name} –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—èüëç, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.".format(
            message.from_user
        ),
        reply_markup=nav.mainMenu,
    )


@dp.message_handler(state=GetCaseZka.case_zka, content_types=types.ContentTypes.TEXT)
async def caseZka_handler(message: types.Message, state: FSMContext):
    with open("data/data_zka.json", "r", encoding="utf-8") as f:
        file_content = f.read()
        data1 = json.loads(file_content)

    flag = True
    for i in data1:
        if message.text in i["number"]:
            news1 = (
                f"–°–∫–ª–∞–¥ —Å—É–¥—É:\n{i['judge']}\n"
                f"–ù–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏: {i['number']}\n"
                f"–î–∞—Ç–∞/–ß–∞—Å: <b>{i['date']}</b> –≥–æ–¥.\n"
                f"–°—Ç–æ—Ä–æ–Ω–∏ –ø–æ —Å–ø—Ä–∞–≤—ñ:\n<b>{i['involved']}</b>\n"
                f"–°—É—Ç—å –ø–æ–∑–æ–≤—É:\n<b>{i['description']}</b>"
            )
            await state.finish()
            await message.answer(
                news1,
                reply_markup=nav.markupsearch_zka,
            )
            flag = False

    if flag:
        await state.finish()
        await message.answer(
            "–Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑'—è–≤–∏–ª–æ—Å—è, –º–æ–∂–ª–∏–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏ –∞–±–æ —Å–ø—Ä–∞–≤–∞ "
            "—â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É.\n–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ –≤–µ–±–ø–æ—Ä—Ç–∞–ª"
            " –ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–æ–≥–æ –∞–ø–µ–ª—è—Ü—ñ–π–Ω–æ–≥–æ —Å—É–¥—É.",
            reply_markup=nav.markup_zka,
        )


@dp.message_handler(state=GetWordZka.surname_zka, content_types=types.ContentTypes.TEXT)
async def wordZka_handler(message: types.Message, state: FSMContext):
    with open("data/data_zka.json", "r", encoding="utf-8") as f:
        file_content = f.read()
        data1 = json.loads(file_content)

        stemObj = UkrainianStemmer(message.text.replace("'", " "))

    flag = True
    for i in data1:
        if stemObj.stem_word() in i["involved"].lower().replace('"', " ").replace(
            "'", " "
        ):
            news1 = (
                f"–°–∫–ª–∞–¥ —Å—É–¥—É:\n{i['judge']}\n"
                f"–ù–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏: {i['number']}\n"
                f"–î–∞—Ç–∞/–ß–∞—Å: <b>{i['date']}</b> –≥–æ–¥.\n"
                f"–°—Ç–æ—Ä–æ–Ω–∏ –ø–æ —Å–ø—Ä–∞–≤—ñ:\n<b>{i['involved']}</b>\n"
                f"–°—É—Ç—å –ø–æ–∑–æ–≤—É:\n<b>{i['description']}</b>"
            )
            await state.finish()
            await message.answer(
                news1,
                reply_markup=nav.markupsearch_zka,
            )
            flag = False

    if flag:
        await state.finish()
        await message.answer(
            "–Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑'—è–≤–∏–ª–æ—Å—è, –º–æ–∂–ª–∏–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–µ —Å–ª–æ–≤–æ –∞–±–æ —Å–ø—Ä–∞–≤–∞ "
            "—â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É.\n–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ –≤–µ–±–ø–æ—Ä—Ç–∞–ª"
            " –ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–æ–≥–æ –∞–ø–µ–ª—è—Ü—ñ–π–Ω–æ–≥–æ —Å—É–¥—É.",
            reply_markup=nav.markup_zka,
        )


@dp.message_handler(state=RegUserZka, commands=["refuse", "–≤—ñ–¥–º–æ–≤–ª—è—é—Å—è"])
@dp.message_handler(Text(equals="refuse", ignore_case=True), state=RegUserZka)
async def regUserZka_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer("OKüëå", reply_markup=nav.markupsearch_zka)


@dp.message_handler(state=RegUserZka.user_id_zka, content_types=types.ContentTypes.TEXT)
async def regUserZka1_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["user_id"] = message.from_user.id

    await message.answer(
        "{0.first_name} –Ω–∞–±–µ—Ä—ñ—Ç—å‚å® –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –∞–±–æ –Ω–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µüì•."
        "\n\n<b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è</b>‚ùó \n–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –Ω–∞–±–∏—Ä–∞—Ç–∏ –º–æ–∂–Ω–∞ –∑ –º–∞–ª–æ—ó –±—É–∫–≤–∏, –∞ "
        "–∞–ø–æ—Å—Ç—Ä–æ—Ñ –≤ —Ç–µ–∫—Å—Ç—ñ "
        "–∑–∞–º—ñ–Ω—è—î—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±—ñ–ª.\n\n–©–æ–¥–æ –Ω–æ–º–µ—Ä–∞ —Å–ø—Ä–∞–≤–∏ –Ω–∞–±–∏—Ä–∞—î–º–æ‚å® –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑—Ä–∞–∑–∫—ñ–≤ "
        "304/555/20 –∞–±–æ 555/20.\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤–∫–∞–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æüíØ."
        "\n\n–ü—ñ—Å–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è <b>–ø—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–ª–∏—Ç—å—Å—è</b>üóë."
        "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \n–Ω–∞üëâ /refuse.".format(message.from_user),
        reply_markup=nav.markupregistr_zka,
    )
    await RegUserZka.name_zka.set()


@dp.message_handler(state=RegUserZka.name_zka, content_types=types.ContentTypes.TEXT)
async def regUserZka2_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        stemObj = UkrainianStemmer(message.text)

        data["name"] = stemObj.stem_word()

    await registering.sql_add_command_zka(state)

    await state.finish()
    await message.answer(
        "{0.first_name} –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—èüëç, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.".format(
            message.from_user
        ),
        reply_markup=nav.mainMenu,
    )


@dp.message_handler(state=GetCaseUg.case_ug, content_types=types.ContentTypes.TEXT)
async def caseUg_handler(message: types.Message, state: FSMContext):
    with open("data/data_ug.json", "r", encoding="utf-8") as f:
        file_content = f.read()
        data1 = json.loads(file_content)

    flag = True
    for i in data1:
        if message.text in i["number"]:
            news1 = (
                f"–°—É–¥–¥—è: {i['judge']}\n"
                f"–ù–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏: {i['number']}\n"
                f"–î–∞—Ç–∞/–ß–∞—Å: <b>{i['date']}</b> –≥–æ–¥.\n"
                f"–°—Ç–æ—Ä–æ–Ω–∏ –ø–æ —Å–ø—Ä–∞–≤—ñ:\n<b>{i['involved']}</b>\n"
                f"–°—É—Ç—å –ø–æ–∑–æ–≤—É:\n<b>{i['description']}</b>"
            )
            await state.finish()
            await message.answer(
                news1,
                reply_markup=nav.markupsearch_ug,
            )
            flag = False

    if flag:
        await state.finish()
        await message.answer(
            "–Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑'—è–≤–∏–ª–æ—Å—è, –º–æ–∂–ª–∏–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏ –∞–±–æ —Å–ø—Ä–∞–≤–∞ "
            "—â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É.\n–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ –≤–µ–±–ø–æ—Ä—Ç–∞–ª"
            " –£–∂–≥–æ—Ä–æ–¥—Å—å–∫–æ–≥–æ –º—ñ—Å—å–∫—Ä–∞–π–æ–Ω–Ω–æ–≥–æ —Å—É–¥—É.",
            reply_markup=nav.markup_ug,
        )


@dp.message_handler(state=GetWordUg.surname_ug, content_types=types.ContentTypes.TEXT)
async def wordUg_handler(message: types.Message, state: FSMContext):
    with open("data/data_ug.json", "r", encoding="utf-8") as f:
        file_content = f.read()
        data1 = json.loads(file_content)

        stemObj = UkrainianStemmer(message.text.replace("'", " "))

    flag = True
    for i in data1:
        if stemObj.stem_word() in i["involved"].lower().replace('"', " ").replace(
            "'", " "
        ):
            news1 = (
                f"–°—É–¥–¥—è: {i['judge']}\n"
                f"–ù–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏: {i['number']}\n"
                f"–î–∞—Ç–∞/–ß–∞—Å: <b>{i['date']}</b> –≥–æ–¥.\n"
                f"–°—Ç–æ—Ä–æ–Ω–∏ –ø–æ —Å–ø—Ä–∞–≤—ñ:\n<b>{i['involved']}</b>\n"
                f"–°—É—Ç—å –ø–æ–∑–æ–≤—É:\n<b>{i['description']}</b>"
            )
            await state.finish()
            await message.answer(
                news1,
                reply_markup=nav.markupsearch_ug,
            )
            flag = False

    if flag:
        await state.finish()
        await message.answer(
            "–Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑'—è–≤–∏–ª–æ—Å—è, –º–æ–∂–ª–∏–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–µ —Å–ª–æ–≤–æ –∞–±–æ —Å–ø—Ä–∞–≤–∞ "
            "—â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É.\n–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ –≤–µ–±–ø–æ—Ä—Ç–∞–ª"
            " –£–∂–≥–æ—Ä–æ–¥—Å—å–∫–æ–≥–æ –º—ñ—Å—å–∫—Ä–∞–π–æ–Ω–Ω–æ–≥–æ —Å—É–¥—É.",
            reply_markup=nav.markup_ug,
        )


@dp.message_handler(state="*", commands=["refuseg", "–≤—ñ–¥–º–æ–≤–ª—è—é—Å—è."])
@dp.message_handler(Text(equals="refuseg", ignore_case=True), state="*")
async def regUserZka_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer("OKüëå", reply_markup=nav.markupsearch_ug)


@dp.message_handler(state=RegUserUg.user_id_ug, content_types=types.ContentTypes.TEXT)
async def regUserUg_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["user_id"] = message.from_user.id

    await message.answer(
        "{0.first_name} –Ω–∞–±–µ—Ä—ñ—Ç—å‚å® –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –∞–±–æ –Ω–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µüì•."
        "\n\n<b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è</b>‚ùó \n–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –Ω–∞–±–∏—Ä–∞—Ç–∏ –º–æ–∂–Ω–∞ –∑ –º–∞–ª–æ—ó –±—É–∫–≤–∏, –∞ "
        "–∞–ø–æ—Å—Ç—Ä–æ—Ñ –≤ —Ç–µ–∫—Å—Ç—ñ "
        "–∑–∞–º—ñ–Ω—è—î—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±—ñ–ª.\n\n–©–æ–¥–æ –Ω–æ–º–µ—Ä–∞ —Å–ø—Ä–∞–≤–∏ –Ω–∞–±–∏—Ä–∞—î–º–æ‚å® –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑—Ä–∞–∑–∫—ñ–≤ "
        "304/555/20 –∞–±–æ 555/20.\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤–∫–∞–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æüíØ."
        "\n\n–ü—ñ—Å–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è <b>–ø—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–ª–∏—Ç—å—Å—è</b>üóë."
        "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \n–Ω–∞üëâ /refuseg.".format(
            message.from_user
        ),
        reply_markup=nav.markupregistr_ug,
    )
    await RegUserUg.name_ug.set()


@dp.message_handler(state=RegUserUg.name_ug, content_types=types.ContentTypes.TEXT)
async def regUserUg_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        stemObj = UkrainianStemmer(message.text)

        data["name"] = stemObj.stem_word()

    await registering.sql_add_command_ug(state)

    await state.finish()
    await message.answer(
        "{0.first_name} –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—èüëç, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.".format(
            message.from_user
        ),
        reply_markup=nav.markupsearch_ug,
    )

@dp.callback_query_handler(simple_cal_callback2.filter(), state=GetCalendarUg.den)
async def process_calendar_ug(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar2().process_selection(callback_query, callback_data)
    if selected:
        den = date.strftime("%d.%m.%Y")
        await state.update_data({"den": den})

        await callback_query.message.answer(
            "–ü—Ä–æ–ø–∏—à—ñ—Ç—å –æ–¥–Ω–µ –∑ –ø—Ä—ñ–∑–≤–∏—â. –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞üëâ /no.",
           reply_markup=nav.inline_butforma2,
        )
        await GetCalendarUg.forma.set()

@dp.callback_query_handler(text=["today2"], state=GetCalendarUg.den)
async def calendar_handler(callback_query: types.CallbackQuery, state: FSMContext):
   if callback_query.data == "today2":
       await callback_query.message.delete_reply_markup()

       today = date.today()
       den = today.strftime("%d.%m.%Y")
       await state.update_data({"den": den})

       await callback_query.message.answer(
           "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω–µ –∑ —Ñ–æ—Ä–º —Å—É–¥–æ—á–∏–Ω—Å—Ç–≤–∞. –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞üëâ /no.",
           reply_markup=nav.inline_butforma2,
       )
       await GetCalendarUg.forma.set()


@dp.callback_query_handler(text=["–∞–¥–º—ñ–Ω2", "—Ü–∏–≤—ñ–ª2", "–∫—Ä–∏–º2", "–≤—Å—ñ2"], state=GetCalendarUg.forma)
async def calendar_handler2(callback_query: types.CallbackQuery, state: FSMContext):
    global c
    await callback_query.answer()
    if callback_query.data == "–∞–¥–º—ñ–Ω2":
        c = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è"
    elif callback_query.data == "—Ü–∏–≤—ñ–ª2":
        c = "–¶–∏–≤—ñ–ª—å–Ω–µ —Å—É–¥–æ—á–∏–Ω—Å—Ç–≤–æ"
    elif callback_query.data == "–∫—Ä–∏–º2":
        c = "–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ —Å—É–¥–æ—á–∏–Ω—Å—Ç–≤–æ"
    elif callback_query.data == "–≤—Å—ñ2":
        c = ""

    forma = c
    await state.update_data({"forma": forma})
    await callback_query.message.delete_reply_markup()
    await callback_query.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω–µ –∑ –ø—Ä—ñ–∑–≤–∏—â. –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞üëâ /no.",
            reply_markup=nav.inline_butjua,
        )
    await GetCalendarUg.judge.set()


@dp.callback_query_handler(
    text=["–¥–µ—Ä–≥–∞—á–æ–≤–∞", "–¥–µ–≥—Ç—è—Ä–µ–Ω–∫–æ", "–¥–µ–º–µ—Ç—Ä–∞–¥–∑–µ",
        "–¥–∞–Ω–∫–æ", "–ª–æ–≥–æ–π–¥–∞", "–ª–µ–º–∞–∫", "–≥–æ–ª—è–Ω–∞", "–ø—Ä–∏–¥–∞—á—É–∫",
        "—Å–∞—Ä–∞–π", "–º–∞–ª—é–∫", "–±–µ–¥—å–æ","–±–µ–Ω—Ü–∞",
          "—Ñ–∞–∑–∏–∫–æ—à", "—à—É–º–∏–ª–æ", "—à–µ–ø–µ—Ç–∫–æ","—ñ–≤–∞–Ω–æ–≤",
        "–∑–∞—Ä–µ–≤–∞", "–∫—Ä–µ–≥—É–ª", "—Ö–∞–º–Ω–∏–∫","all"], state=GetCalendarUg.judge
)
async def calendar_handler(callback_query: types.CallbackQuery, state: FSMContext):
    with open("data/data_ug.json", "r", encoding="utf-8") as f:
        file_content = f.read()
        data1 = json.loads(file_content)

        data = await state.get_data()
        den = data.get("den")
        forma = data.get("forma")

        await callback_query.answer()
        if callback_query.data == "–¥–µ—Ä–≥–∞—á–æ–≤–∞":
            j = "–î–µ—Ä–≥–∞—á–æ–≤–∞ –ù.–í."
        elif callback_query.data == "–¥–µ–≥—Ç—è—Ä–µ–Ω–∫–æ":
            j = "–î–µ–≥—Ç—è—Ä–µ–Ω–∫–æ –ö.–°."
        elif callback_query.data == "–¥–µ–º–µ—Ç—Ä–∞–¥–∑–µ":
            j = "–î–µ–º–µ—Ç—Ä–∞–¥–∑–µ –¢.–†."
        elif callback_query.data == "–¥–∞–Ω–∫–æ":
            j = "–î–∞–Ω–∫–æ –í.–ô."
        elif callback_query.data == "–ª–æ–≥–æ–π–¥–∞":
            j = "–õ–æ–≥–æ–π–¥–∞ –Ü.–í."
        elif callback_query.data == "–ª–µ–º–∞–∫":
            j = "–õ–µ–º–∞–∫ –û.–í."
        elif callback_query.data == "–≥–æ–ª—è–Ω–∞":
            j = "–ì–æ–ª—è–Ω–∞ –û.–í."
        elif callback_query.data == "–ø—Ä–∏–¥–∞—á—É–∫":
            j = "–ü—Ä–∏–¥–∞—á—É–∫ –û.–ê."
        elif callback_query.data == "—Å–∞—Ä–∞–π":
            j = "–°–∞—Ä–∞–π –ê.–Ü."
        elif callback_query.data == "–º–∞–ª—é–∫":
            j = "–ú–∞–ª—é–∫ –í.–ú."
        elif callback_query.data == "–±–µ–¥—å–æ":
            j = "–ë–µ–¥—å–æ –í.–Ü."
        elif callback_query.data == "–±–µ–Ω—Ü–∞":
            j = "–ë–µ–Ω—Ü–∞ –ö.–ö."
        elif callback_query.data == "—Ñ–∞–∑–∏–∫–æ—à":
            j = "–§–∞–∑–∏–∫–æ—à –û.–í."
        elif callback_query.data == "—à—É–º–∏–ª–æ":
            j = "–®—É–º–∏–ª–æ –ù.–ë."
        elif callback_query.data == "—à–µ–ø–µ—Ç–∫–æ":
            j = "–®–µ–ø–µ—Ç–∫–æ –Ü.–û."
        elif callback_query.data == "—ñ–≤–∞–Ω–æ–≤":
            j = "–Ü–≤–∞–Ω–æ–≤ –ê.–ü."
        elif callback_query.data == "–∑–∞—Ä–µ–≤–∞":
            j = "–ó–∞—Ä–µ–≤–∞ –ù.–Ü."
        elif callback_query.data == "–∫—Ä–µ–≥—É–ª":
            j = "–ö—Ä–µ–≥—É–ª –ú.–ú."
        elif callback_query.data == "—Ö–∞–º–Ω–∏–∫":
            j = "–•–∞–º–Ω–∏–∫ –ú.–ú."
        elif callback_query.data == "all":
            j = ""
        await callback_query.message.delete_reply_markup()

        flag = True

        for i in data1:
            if den in i["date"] and forma in i["forma"] and j in i["judge"]:
                news3 = (
                    f"–°—É–¥–¥—è : {i['judge']}\n"
                    f"–ù–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏ : {i['number']}\n"
                    f"–î–∞—Ç–∞/–ß–∞—Å : <b>{i['date']}</b> –≥–æ–¥.\n"
                    f"–°—Ç–æ—Ä–æ–Ω–∏ –ø–æ —Å–ø—Ä–∞–≤—ñ :\n<b>{i['involved']}</b>\n"
                    f"–°—É—Ç—å : <b>{i['description']}</b>\n"
                    f"{i['forma']}"
                )

                await state.finish()
                await callback_query.message.answer(
                    news3,
                    reply_markup=nav.markupsearch_ug,
                )
                flag = False

        if flag:
            await state.finish()
            await callback_query.message.answer(
                "–Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑'—è–≤–∏–ª–æ—Å—è, –º–æ–∂–ª–∏–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–µ —Å–ª–æ–≤–æ –∞–±–æ —Å–ø—Ä–∞–≤–∞ "
                "—â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É.\n–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ –≤–µ–±–ø–æ—Ä—Ç–∞–ª"
                " –£–∂–≥–æ—Ä–æ–¥—Å—å–∫–æ–≥–æ –º—ñ—Å—å–∫—Ä–∞–π–æ–Ω–Ω–æ–≥–æ —Å—É–¥—É.",
                reply_markup=nav.markup_ug,)


@dp.callback_query_handler(text="menusearch")
async def callback_btn(callback_query: types.CallbackQuery):
    await bot.delete_message(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
    )
    await callback_query.message.answer(
        "–í –¥–∞–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –¥–∞—Ç—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –Ω–∞–∂–∞–≤—à–∏üïπ "
        "–Ω–∞ –Ω–∏–∂–µ –≤–∫–∞–∑–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏üëá:"
        "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üé´–ü–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Ç–∞ —ñ–º‚Äô—è–º - –Ω–∞–±–∏—Ä–∞—î–º–æ –ü.–Ü —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•"
        "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üîñ–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏ - –Ω–∞–±–∏—Ä–∞—î–º–æ 304/555/20 —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•"
        "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üóìÔ∏è–ü–æ—à—É–∫ –∑–∞ –¥–∞—Ç–æ—é - –≤–∏–±–∏—Ä–∞—î–º–æ –¥–∞—Ç—É —ñ –ø—Ä—ñ–∑–≤–∏—â–µ —Å—É–¥–¥—ñ",
        reply_markup=nav.markupsearch,
    )
    await callback_query.answer("–†–æ–∑–¥—ñ–ª üìÖ–î–∞—Ç–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è")


@dp.callback_query_handler(text="menuzka")
async def callback_btn2(callback_query: types.CallbackQuery):
    await bot.delete_message(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
    )
    await callback_query.message.answer(
        "–í –¥–∞–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ, –Ω–∞–∂–∞–≤—à–∏üïπ –Ω–∞ –Ω–∏–∂–µ –≤–∫–∞–∑–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏üëá,"
        " –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –¥–∞—Ç—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–æ–≥–æ –∞–ø–µ–ª—è—Ü—ñ–π–Ω–æ–≥–æ —Å—É–¥—É"
        " —Ç–∞ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω—èüì© —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–∞—Ç—É, —á–∞—Å "
        "—Å—É–¥–æ–≤–æ–≥–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è:"
        "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üé´–ü–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Ç–∞ —ñ–º‚Äô—è–º - –Ω–∞–±–∏—Ä–∞—î–º–æ –ü.–Ü. —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•"
        "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üîñ–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏‚å® - –Ω–∞–±–∏—Ä–∞—î–º–æ 304/555/20 —ñ "
        "–≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì• "
        "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üì©Push —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - —Å–µ—Ä–≤—ñ—Å –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
        " –¥–∞—Ç–∏ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.",
        reply_markup=nav.markupsearch_zka,
    )
    await callback_query.answer("–†–æ–∑–¥—ñ–ª ‚öñÔ∏è–ê–ø–µ–ª—è—Ü—ñ–π–Ω–∏–π —Å—É–¥")


@dp.callback_query_handler(text="menuug")
async def callback_btn3(callback_query: types.CallbackQuery):
    await bot.delete_message(chat_id=callback_query.from_user.id,message_id=callback_query.message.message_id,)
    await callback_query.message.answer(
        "{0.first_name} –≤ –¥–∞–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ, –Ω–∞–∂–∞–≤—à–∏üïπ –Ω–∞ –Ω–∏–∂–µ –≤–∫–∞–∑–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏üëá,"
        " –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –¥–∞—Ç—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –£–∂–≥–æ—Ä–æ–¥—Å—å–∫–æ–≥–æ –º—ñ—Å—å–∫—Ä–∞–π–æ–Ω–Ω–æ–≥–æ —Å—É–¥—É"
        " —Ç–∞ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω—èüì© —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–∞—Ç—É, —á–∞—Å "
        "—Å—É–¥–æ–≤–æ–≥–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è:"
        "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üé´–ü–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Ç–∞ —ñ–º‚Äô—è–º - –Ω–∞–±–∏—Ä–∞—î–º–æ –ü.–Ü. —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•"
        "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üîñ–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏‚å® - –Ω–∞–±–∏—Ä–∞—î–º–æ 304/555/20 —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æüì•"
        "\n\nüìç –ù–∞—Ç–∏—Å–∫–∞—î–º–æüì≤ –Ω–∞ üì©Push —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - —Å–µ—Ä–≤—ñ—Å –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
        " –¥–∞—Ç–∏ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.\n\n–©–æ–± –æ–∑–≤—É—á–∏—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /–≥–æ–ª–æ—Å –∞–±–æ /voice.".format(
            callback_query.message.from_user
        ),
        reply_markup=nav.markupsearch_ug,
    )
    await callback_query.answer("–†–æ–∑–¥—ñ–ª ‚öñ–£–∂–≥–æ—Ä–æ–¥—Å—å–∫–æ–≥–æ –º—ñ—Å—å–∫—Ä–∞–π–æ–Ω–Ω–æ–≥–æ —Å—É–¥—É")


@dp.message_handler(state=GetVoice.voiceT, content_types=types.ContentTypes.TEXT)
async def voice_handler(message: types.Message, state: FSMContext):
    text = message.text
    tts = gTTS(text=text, lang="uk", tld="com.ua")
    tts.save(f"data/{message.from_user.first_name}.mp3")
    await state.finish()
    with open(f"data/{message.from_user.first_name}.mp3", "rb") as speech:
        await bot.send_audio(
            message.from_user.id,
            speech,
            title="–û–∑–≤—É—á–µ–Ω–∏–π —Ç–µ–∫—Å—Ç",
            reply_markup=nav.mainMenu,
        )


@dp.callback_query_handler(
    text=["v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8", "v9"]
)
async def callback_btn3(callback_query: types.CallbackQuery):
    if callback_query.data == "v0":
        await bot.delete_message(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
        )
        await callback_query.message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=nav.mainMenu)
    elif callback_query.data == "v1":
        await bot.delete_message(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
        )
        await callback_query.message.answer(
            text="https://youtu.be/vxn_-h8BVnc", reply_markup=nav.inline_button
        )
    elif callback_query.data == "v2":
        await bot.delete_message(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
        )
        await callback_query.message.answer(
            text="https://youtu.be/ultbtXfQJvE", reply_markup=nav.inline_button
        )
    elif callback_query.data == "v3":
        await bot.delete_message(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
        )
        await callback_query.message.answer(
            text="https://youtu.be/kBlQHQLqx68", reply_markup=nav.inline_button
        )
    elif callback_query.data == "v4":
        await bot.delete_message(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
        )
        await callback_query.message.answer(
            text="https://youtu.be/Hw1HshMi6hQ", reply_markup=nav.inline_button
        )
    elif callback_query.data == "v5":
        await bot.delete_message(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
        )
        await callback_query.message.answer(
            text="https://youtu.be/94yAoQngPKI", reply_markup=nav.inline_button
        )
    elif callback_query.data == "v6":
        await bot.delete_message(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
        )
        await callback_query.message.answer(
            text="https://youtu.be/9Jl-YflKoXM", reply_markup=nav.inline_button
        )
    elif callback_query.data == "v7":
        await bot.delete_message(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
        )
        await callback_query.message.answer(
            text="https://youtu.be/GetzQq-09qU", reply_markup=nav.inline_button
        )
    elif callback_query.data == "v8":
        await bot.delete_message(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
        )
        await callback_query.message.answer(
            text="https://youtu.be/g20JeR9GMKY", reply_markup=nav.inline_button
        )
    elif callback_query.data == "v9":
        await bot.delete_message(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
        )
        await callback_query.message.answer(
            text="https://youtu.be/5K32OzR7eMU", reply_markup=nav.inline_button
        )
    await callback_query.answer()


if __name__ == "__main__":
    try:
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    except:
        pass
